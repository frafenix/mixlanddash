import { NodePgDatabase } from 'drizzle-orm/node-postgres';
import * as schema from '../db/schema';
import * as z from 'zod';
declare const AnagraficaSchema: z.ZodObject<{
    tipoSoggetto: z.ZodEnum<{
        privato: "privato";
        azienda: "azienda";
        pa: "pa";
        condominio: "condominio";
    }>;
    isFornitore: z.ZodDefault<z.ZodBoolean>;
    ragioneSociale: z.ZodOptional<z.ZodString>;
    nome: z.ZodOptional<z.ZodString>;
    cognome: z.ZodOptional<z.ZodString>;
    codiceFiscale: z.ZodString;
    partitaIva: z.ZodOptional<z.ZodString>;
    codiceDestinatarioSdi: z.ZodOptional<z.ZodString>;
    codiceUnivocoIpa: z.ZodOptional<z.ZodString>;
    pec: z.ZodUnion<[z.ZodOptional<z.ZodString>, z.ZodLiteral<"">]>;
    email: z.ZodString;
    telefono: z.ZodOptional<z.ZodString>;
    cellulare: z.ZodOptional<z.ZodString>;
    via: z.ZodString;
    numeroCivico: z.ZodOptional<z.ZodString>;
    cap: z.ZodString;
    citta: z.ZodString;
    provincia: z.ZodString;
    nazione: z.ZodDefault<z.ZodString>;
    indirizzoSpedizioneDiverso: z.ZodDefault<z.ZodBoolean>;
    viaSpedizione: z.ZodOptional<z.ZodString>;
    numeroCivicoSpedizione: z.ZodOptional<z.ZodString>;
    capSpedizione: z.ZodOptional<z.ZodString>;
    cittaSpedizione: z.ZodOptional<z.ZodString>;
    provinciaSpedizione: z.ZodOptional<z.ZodString>;
    nazioneSpedizione: z.ZodOptional<z.ZodString>;
    tipoCliente: z.ZodOptional<z.ZodString>;
    iban: z.ZodOptional<z.ZodString>;
    condizioniPagamento: z.ZodOptional<z.ZodString>;
    referente: z.ZodOptional<z.ZodString>;
    note: z.ZodOptional<z.ZodString>;
    status: z.ZodDefault<z.ZodEnum<{
        attivo: "attivo";
        in_attesa: "in_attesa";
        blacklist: "blacklist";
    }>>;
}, z.core.$strip>;
export declare class ContactsService {
    private db;
    constructor(db: NodePgDatabase<typeof schema>);
    create(user: any, data: z.infer<typeof AnagraficaSchema>): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        tipoSoggetto: string;
        isFornitore: string | null;
        ragioneSociale: string | null;
        nome: string | null;
        cognome: string | null;
        codiceFiscale: string;
        partitaIva: string | null;
        codiceDestinatarioSdi: string | null;
        codiceUnivocoIpa: string | null;
        pec: string | null;
        email: string;
        telefono: string | null;
        cellulare: string | null;
        via: string;
        numeroCivico: string | null;
        cap: string;
        citta: string;
        provincia: string;
        nazione: string | null;
        indirizzoSpedizioneDiverso: string | null;
        viaSpedizione: string | null;
        numeroCivicoSpedizione: string | null;
        capSpedizione: string | null;
        cittaSpedizione: string | null;
        provinciaSpedizione: string | null;
        nazioneSpedizione: string | null;
        tipoCliente: string | null;
        iban: string | null;
        condizioniPagamento: string | null;
        referente: string | null;
        note: string | null;
        status: string | null;
    }[]>;
    findAll(user: any): Promise<{
        isFornitore: boolean;
        indirizzoSpedizioneDiverso: boolean;
        id: string;
        tenantId: string;
        tipoSoggetto: string;
        ragioneSociale: string | null;
        nome: string | null;
        cognome: string | null;
        codiceFiscale: string;
        partitaIva: string | null;
        codiceDestinatarioSdi: string | null;
        codiceUnivocoIpa: string | null;
        pec: string | null;
        email: string;
        telefono: string | null;
        cellulare: string | null;
        via: string;
        numeroCivico: string | null;
        cap: string;
        citta: string;
        provincia: string;
        nazione: string | null;
        viaSpedizione: string | null;
        numeroCivicoSpedizione: string | null;
        capSpedizione: string | null;
        cittaSpedizione: string | null;
        provinciaSpedizione: string | null;
        nazioneSpedizione: string | null;
        tipoCliente: string | null;
        iban: string | null;
        condizioniPagamento: string | null;
        referente: string | null;
        note: string | null;
        status: string | null;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    findOne(user: any, id: string): Promise<{
        isFornitore: boolean;
        indirizzoSpedizioneDiverso: boolean;
        id: string;
        tenantId: string;
        tipoSoggetto: string;
        ragioneSociale: string | null;
        nome: string | null;
        cognome: string | null;
        codiceFiscale: string;
        partitaIva: string | null;
        codiceDestinatarioSdi: string | null;
        codiceUnivocoIpa: string | null;
        pec: string | null;
        email: string;
        telefono: string | null;
        cellulare: string | null;
        via: string;
        numeroCivico: string | null;
        cap: string;
        citta: string;
        provincia: string;
        nazione: string | null;
        viaSpedizione: string | null;
        numeroCivicoSpedizione: string | null;
        capSpedizione: string | null;
        cittaSpedizione: string | null;
        provinciaSpedizione: string | null;
        nazioneSpedizione: string | null;
        tipoCliente: string | null;
        iban: string | null;
        condizioniPagamento: string | null;
        referente: string | null;
        note: string | null;
        status: string | null;
        createdAt: Date;
        updatedAt: Date;
    }>;
    update(user: any, id: string, data: Partial<z.infer<typeof AnagraficaSchema>>): Promise<{
        isFornitore: boolean;
        indirizzoSpedizioneDiverso: boolean;
        id: string;
        tenantId: string;
        tipoSoggetto: string;
        ragioneSociale: string | null;
        nome: string | null;
        cognome: string | null;
        codiceFiscale: string;
        partitaIva: string | null;
        codiceDestinatarioSdi: string | null;
        codiceUnivocoIpa: string | null;
        pec: string | null;
        email: string;
        telefono: string | null;
        cellulare: string | null;
        via: string;
        numeroCivico: string | null;
        cap: string;
        citta: string;
        provincia: string;
        nazione: string | null;
        viaSpedizione: string | null;
        numeroCivicoSpedizione: string | null;
        capSpedizione: string | null;
        cittaSpedizione: string | null;
        provinciaSpedizione: string | null;
        nazioneSpedizione: string | null;
        tipoCliente: string | null;
        iban: string | null;
        condizioniPagamento: string | null;
        referente: string | null;
        note: string | null;
        status: string | null;
        createdAt: Date;
        updatedAt: Date;
    }[]>;
    delete(user: any, id: string): Promise<{
        id: string;
        createdAt: Date;
        updatedAt: Date;
        tenantId: string;
        tipoSoggetto: string;
        isFornitore: string | null;
        ragioneSociale: string | null;
        nome: string | null;
        cognome: string | null;
        codiceFiscale: string;
        partitaIva: string | null;
        codiceDestinatarioSdi: string | null;
        codiceUnivocoIpa: string | null;
        pec: string | null;
        email: string;
        telefono: string | null;
        cellulare: string | null;
        via: string;
        numeroCivico: string | null;
        cap: string;
        citta: string;
        provincia: string;
        nazione: string | null;
        indirizzoSpedizioneDiverso: string | null;
        viaSpedizione: string | null;
        numeroCivicoSpedizione: string | null;
        capSpedizione: string | null;
        cittaSpedizione: string | null;
        provinciaSpedizione: string | null;
        nazioneSpedizione: string | null;
        tipoCliente: string | null;
        iban: string | null;
        condizioniPagamento: string | null;
        referente: string | null;
        note: string | null;
        status: string | null;
    }[]>;
}
export {};
